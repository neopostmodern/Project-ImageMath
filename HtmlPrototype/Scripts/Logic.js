// Generated by CoffeeScript 1.7.1
(function() {
  var CANVAS_SIZE, ExtractUrlParameter, ImageShifter;

  CANVAS_SIZE = 400;

  ImageShifter = (function() {
    function ImageShifter(resolution, gridSize, defaultTargetCanvas, operator) {
      var xPosition, yPosition, _i, _j;
      this.Resolution = resolution;
      this.GridSize = gridSize;
      this.DefaultTargetCanvas = defaultTargetCanvas;
      this.Operator = operator != null ? operator : "multiplication";
      this.Matrix = [];
      for (xPosition = _i = 0; 0 <= gridSize ? _i < gridSize : _i > gridSize; xPosition = 0 <= gridSize ? ++_i : --_i) {
        this.Matrix.push([]);
        for (yPosition = _j = 0; 0 <= gridSize ? _j < gridSize : _j > gridSize; yPosition = 0 <= gridSize ? ++_j : --_j) {
          this.Matrix[xPosition].push({
            active: xPosition === yPosition ? true : false
          });
        }
      }
    }

    ImageShifter.prototype.SetImage = function(image) {
      this.Image = image;
      return this.DrawShift();
    };

    ImageShifter.prototype.CreateInputGrid = function(gridElement) {
      var element, gridSquare, row, xPosition, yPosition, _i, _j, _len, _len1, _ref;
      _ref = this.Matrix;
      for (xPosition = _i = 0, _len = _ref.length; _i < _len; xPosition = ++_i) {
        row = _ref[xPosition];
        for (yPosition = _j = 0, _len1 = row.length; _j < _len1; yPosition = ++_j) {
          element = row[yPosition];
          gridSquare = document.createElement('div');
          gridSquare.setAttribute('class', "grid-square");
          gridSquare.setAttribute('id', xPosition * this.GridSize + yPosition);
          gridSquare.setAttribute('data-x-position', xPosition);
          gridSquare.setAttribute('data-y-position', yPosition);
          if (element.active) {
            gridSquare.classList.add('active');
          }
          gridSquare.onclick = (function(imageShifter) {
            return function() {
              var x, y;
              x = this.getAttribute('data-x-position');
              y = this.getAttribute('data-y-position');
              imageShifter.Matrix[x][y].active = !imageShifter.Matrix[x][y].active;
              this.classList.toggle('active');
              return imageShifter.DrawShift();
            };
          })(this);
          gridElement.appendChild(gridSquare);
        }
      }
    };

    ImageShifter.prototype.DrawShift = function(targetCanvas) {
      var canvas, context, index, sourceSquareSize, targetSquareSize, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
      canvas = targetCanvas != null ? targetCanvas : this.DefaultTargetCanvas;
      context = canvas.getContext("2d");
      context.globalCompositeOperation = 'lighter';
      context.clearRect(0, 0, this.Resolution, this.Resolution);
      sourceSquareSize = this.Image.naturalHeight / this.GridSize;
      targetSquareSize = this.Resolution / this.GridSize;
      for (x = _i = 0, _ref = this.GridSize; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.GridSize; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          if (this.Operator === "multiplication") {
            for (index = _k = 0, _ref2 = this.GridSize; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; index = 0 <= _ref2 ? ++_k : --_k) {
              if (this.Matrix[x][index].active) {
                context.drawImage(this.Image, index * sourceSquareSize, y * sourceSquareSize, sourceSquareSize, sourceSquareSize, x * targetSquareSize, y * targetSquareSize, targetSquareSize, targetSquareSize);
              }
            }
          } else if (this.Operator === "left-multiplication") {
            for (index = _l = 0, _ref3 = this.GridSize; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; index = 0 <= _ref3 ? ++_l : --_l) {
              if (this.Matrix[index][y].active) {
                context.drawImage(this.Image, x * sourceSquareSize, index * sourceSquareSize, sourceSquareSize, sourceSquareSize, x * targetSquareSize, y * targetSquareSize, targetSquareSize, targetSquareSize);
              }
            }
          } else {
            throw "Undefined operator";
          }
        }
      }
    };

    return ImageShifter;

  })();

  ExtractUrlParameter = function(parameterName) {
    var regEx, regExString, results;
    parameterName = parameterName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regExString = "[\\?&]" + parameterName + "=([^&#]*)";
    regEx = new RegExp(regExString);
    results = regEx.exec(window.location.href);
    return results != null ? results[1] : void 0;
  };

  window.onload = function() {
    var DrawAddition, LoadImage, additionCanvas, additionCanvasColorSelector, canvas1, canvas1ColorSelector, canvas2, canvas2ColorSelector, css, grid1, grid2, gridSize, shifter1, shifter2, source1, source1Selector, source2, source2Selector, _ref;
    LoadImage = function(source, sourceSelector, shifter) {
      var image, imagePath;
      imagePath = "Images/" + sourceSelector.value + ".JPG";
      image = new Image();
      image.src = imagePath;
      source.setAttribute('src', imagePath);
      return image.addEventListener('load', function() {
        return shifter.SetImage(image);
      });
    };
    gridSize = (_ref = ExtractUrlParameter('grid')) != null ? _ref : 10;
    css = document.createElement('style');
    css.type = 'text/css';
    css.innerHTML = ".grid-square { width: " + (400 / gridSize) + "; height: " + (400 / gridSize) + "; }";
    document.body.appendChild(css);
    source1 = document.getElementById('source-1');
    source1Selector = document.getElementById('source-1-selector');
    grid1 = document.getElementById('grid-1');
    canvas1 = document.getElementById('canvas-1');
    canvas1ColorSelector = document.getElementById('canvas-1-color-selector');
    shifter1 = new ImageShifter(400, gridSize, canvas1);
    shifter1.CreateInputGrid(grid1);
    LoadImage(source1, source1Selector, shifter1);
    source1Selector.onchange = function() {
      return LoadImage(source1, source1Selector, shifter1);
    };
    canvas1ColorSelector.onchange = function() {
      return canvas1.style.backgroundColor = canvas1ColorSelector.value;
    };
    source2 = document.getElementById('source-2');
    source2Selector = document.getElementById('source-2-selector');
    grid2 = document.getElementById('grid-2');
    canvas2 = document.getElementById('canvas-2');
    canvas2ColorSelector = document.getElementById('canvas-2-color-selector');
    shifter2 = new ImageShifter(CANVAS_SIZE, gridSize, canvas2, 'left-multiplication');
    shifter2.CreateInputGrid(grid2);
    LoadImage(source2, source2Selector, shifter2);
    source2Selector.onchange = function() {
      return LoadImage(source2, source2Selector, shifter2);
    };
    canvas2ColorSelector.onchange = function() {
      return canvas2.style.backgroundColor = canvas2ColorSelector.value;
    };
    additionCanvas = document.getElementById('canvas-addition');
    additionCanvasColorSelector = document.getElementById('canvas-addition-color-selector');
    DrawAddition = function() {
      var context;
      context = additionCanvas.getContext('2d');
      context.globalCompositeOperation = 'lighter';
      context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);
      context.drawImage(canvas1, 0, 0, CANVAS_SIZE, CANVAS_SIZE);
      return context.drawImage(canvas2, 0, 0, CANVAS_SIZE, CANVAS_SIZE);
    };
    document.getElementsByTagName('body')[0].onclick = function() {
      return window.setTimeout(DrawAddition, 100);
    };
    window.setTimeout(DrawAddition, 100);
    window.setTimeout(DrawAddition, 1000);
    window.setTimeout(DrawAddition, 5000);
    return additionCanvasColorSelector.onchange = function() {
      return additionCanvas.style.backgroundColor = additionCanvasColorSelector.value;
    };
  };

}).call(this);

//# sourceMappingURL=Logic.map
